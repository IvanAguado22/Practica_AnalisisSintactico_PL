/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, DIVISION;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal Double 	REALNUMBER, HEXNUMBER;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal Double     expr1;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIVISION;
precedence left UMINUS;

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             | PLUS expr:e                  {: RESULT = +e;           :}
             | expr:e1 DIVISION expr:e2     {: RESULT = e1/e2;        :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	        {: RESULT = e;           :}
             | NUMBER:n	                    {: RESULT = n;           :}
             ;
             
expr_list ::= expr_list expr1:e SEMI         {: System.out.println(e); :}
            | expr1:e SEMI                   {: System.out.println(e); :}
            ;
expr1      ::= expr1:e1 PLUS  expr1:e2       {: RESULT = e1+e2;        :}
             | expr1:e1 MINUS expr1:e2       {: RESULT = e1-e2;        :}
             | expr1:e1 TIMES expr1:e2       {: RESULT = e1*e2;        :}
             | MINUS expr1:e                 {: RESULT = -e;           :}
             | PLUS expr1:e                  {: RESULT = +e;           :}
             | expr1:e1 DIVISION expr1:e2    {: RESULT = e1/e2;        :}
             %prec UMINUS
             | LPAREN expr1:e RPAREN	     {: RESULT = e;           :}
             | REALNUMBER:n	                 {: RESULT = n;           :}
             ;
       