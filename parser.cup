/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
  Double MEM[] = new Double[100];
  {
    for (int i = 0; i<MEM.length; i++){
      MEM[i] = 0.0;
    }
  }
:};

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal           SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, DIVISION, LOG, EXP, LN, SIN, COS, EQUAL, PLUSPLUS, MINUSMINUS;
terminal Double    NUMBER, HEXNUMBER, REALNUMBER;        // our scanner provides numbers as doubles
terminal Integer   ARRAYMEM;

/* Non terminals */
non terminal           expr_list;
non terminal Double    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIVISION;
precedence left UMINUS;

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        			   :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        			   :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        			   :}
             | expr:e1 DIVISION expr:e2     {: RESULT = e1/e2;        			   :}
             | MINUS expr:e                 {: RESULT = -e;           			   :}
             | PLUS expr:e                  {: RESULT = +e;           			   :}
             | LOG expr:e                   {: RESULT = Math.log10(e); 			   :}
             | LN expr:e                    {: RESULT = Math.log(e);    		   :}
             | EXP expr:e                   {: RESULT = Math.exp(e); 			   :}
             | SIN expr:e                   {: RESULT = Math.sin(e); 			   :}
             | COS expr:e                   {: RESULT = Math.cos(e); 			   :}
             | PLUSPLUS ARRAYMEM:n    		{: MEM[n] = ++MEM[n]; RESULT = MEM[n]; :}
             | ARRAYMEM:n PLUSPLUS 		    {: RESULT = MEM[n]; MEM[n] = MEM[n]+1; :}            
             | ARRAYMEM:n MINUSMINUS 		{: RESULT = MEM[n]; MEM[n] = MEM[n]-1; :}             
			 | MINUSMINUS ARRAYMEM:n        {: MEM[n] = --MEM[n]; RESULT = MEM[n]; :}
			 | ARRAYMEM:n EQUAL expr:e      {: MEM[n] = e;	RESULT = MEM[n];	   :}
			 | ARRAYMEM:n    				{: RESULT = MEM[n];		 :}
             %prec UMINUS
             | LPAREN expr:e RPAREN         {: RESULT = e;           :}
             | NUMBER:n                     {: RESULT = n;           :}
             | HEXNUMBER:n                  {: RESULT = n;           :}
             | REALNUMBER:n                 {: RESULT = n;           :}             
             ;